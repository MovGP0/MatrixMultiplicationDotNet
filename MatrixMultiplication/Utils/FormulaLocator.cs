using MatrixMultiplication.KnownAlgorithms;

namespace MatrixMultiplication.Utils;

public static class FormulaLocator
{
    /// <summary>
    /// Returns all supported (n, m, p) triples for which factorizations exist.
    /// </summary>
    public static IReadOnlyList<(int n, int m, int p)> GetSupportedTriples()
    {
        return new List<(int n, int m, int p)>
        {
            (2,2,2),
            (2,2,3),
            (2,2,4),
            (2,2,5),
            (2,2,6),
            (2,2,7),
            (2,2,8),
            (2,3,3),
            (2,3,4),
            (2,3,5),
            (2,4,4),
            (2,4,5),
            (2,5,5),
            (3,3,3),
            (3,3,4),
            (3,3,5),
            (3,4,4),
            (3,4,5),
            (3,4,11),
            (3,5,5),
            (3,5,9),
            (3,9,11),
            (4,4,4),
            (4,4,5),
            (4,5,5),
            (4,5,9),
            (4,5,10),
            (4,5,11),
            (4,9,10),
            (4,9,11),
            (4,11,11),
            (4,11,12),
            (5,5,5),
            (5,5,7),
            (5,7,9),
            (5,7,10),
            (5,7,11),
            (5,8,9),
            (5,8,10),
            (5,8,11),
            (5,9,9),
            (5,9,10),
            (5,9,11),
            (5,9,12),
            (6,7,9),
            (6,7,10),
            (6,7,11),
            (6,8,10),
            (6,8,11),
            (6,9,9),
            (6,9,10),
            (6,9,11),
            (7,7,9),
            (7,7,10),
            (7,7,11),
            (7,8,9),
            (7,8,10),
            (7,8,11),
            (7,8,12),
            (7,9,9),
            (7,9,10),
            (7,9,11),
            (7,9,12),
            (7,10,10),
            (7,10,11),
            (7,11,11),
            (8,8,10),
            (8,8,11),
            (8,9,10),
            (8,9,11),
            (8,9,12),
            (8,10,10),
            (8,10,11),
            (8,10,12),
            (8,11,11),
            (8,11,12),
            (9,9,9),
            (9,9,10),
            (9,9,11),
            (9,10,10),
            (9,10,11),
            (9,10,12),
            (9,11,11),
            (9,11,12),
            (10,10,10),
            (10,10,11),
            (10,10,12),
            (10,11,11),
            (10,11,12),
            (10,12,12),
            (11,11,11),
            (11,11,12),
            (11,12,12),
            (4,5,7),
            (4,6,6),
            (4,6,7),
            (4,7,7),
            (5,5,6)
        };
    }

    /// <summary>
    /// Returns the Formula for a given (n,m,p), if supported.
    /// </summary>
    public static Formula BuildFormula(int n, int m, int p)
    {
        return (n, m, p) switch
        {
            (2,2,2) => AlphaTensor_2x2x2.Build2x2x2Formula_Real(),
            (2,2,3) => AlphaTensor_2x2x3.Build2x2x3Formula_Real(),
            (2,2,4) => AlphaTensor_2x2x4.Build2x2x4Formula_Real(),
            (2,2,5) => AlphaTensor_2x2x5.Build2x2x5Formula_Real(),
            (2,2,6) => AlphaTensor_2x2x6.Build2x2x6Formula_Real(),
            (2,2,7) => AlphaTensor_2x2x7.Build2x2x7Formula_Real(),
            (2,2,8) => AlphaTensor_2x2x8.Build2x2x8Formula_Real(),
            (2,3,3) => AlphaTensor_2x3x3.Build2x3x3Formula_Real(),
            (2,3,4) => AlphaTensor_2x3x4.Build2x3x4Formula_Real(),
            (2,3,5) => AlphaTensor_2x3x5.Build2x3x5Formula_Real(),
            (2,4,4) => AlphaTensor_2x4x4.Build2x4x4Formula_Real(),
            (2,4,5) => AlphaTensor_2x4x5.Build2x4x5Formula_Real(),
            (2,5,5) => AlphaTensor_2x5x5.Build2x5x5Formula_Real(),
            (3,3,3) => AlphaTensor_3x3x3.Build3x3x3Formula_Real(),
            (3,3,4) => AlphaTensor_3x3x4.Build3x3x4Formula_Real(),
            (3,3,5) => AlphaTensor_3x3x5.Build3x3x5Formula_Real(),
            (3,4,4) => AlphaTensor_3x4x4.Build3x4x4Formula_Real(),
            (3,4,5) => AlphaTensor_3x4x5.Build3x4x5Formula_Real(),
            (3,4,11) => AlphaTensor_3x4x11.Build3x4x11Formula_Real(),
            (3,5,5) => AlphaTensor_3x5x5.Build3x5x5Formula_Real(),
            (3,5,9) => AlphaTensor_3x5x9.Build3x5x9Formula_Real(),
            (3,9,11) => AlphaTensor_3x9x11.Build3x9x11Formula_Real(),
            (4,4,4) => AlphaTensor_4x4x4.Build4x4x4Formula_Real(),
            (4,4,5) => AlphaTensor_4x4x5.Build4x4x5Formula_Real(),
            (4,5,5) => AlphaTensor_4x5x5.Build4x5x5Formula_Real(),
            (4,5,9) => AlphaTensor_4x5x9.Build4x5x9Formula_Real(),
            (4,5,10) => AlphaTensor_4x5x10.Build4x5x10Formula_Real(),
            (4,5,11) => AlphaTensor_4x5x11.Build4x5x11Formula_Real(),
            (4,9,10) => AlphaTensor_4x9x10.Build4x9x10Formula_Real(),
            (4,9,11) => AlphaTensor_4x9x11.Build4x9x11Formula_Real(),
            (4,11,11) => AlphaTensor_4x11x11.Build4x11x11Formula_Real(),
            (4,11,12) => AlphaTensor_4x11x12.Build4x11x12Formula_Real(),
            (5,5,5) => AlphaTensor_5x5x5.Build5x5x5Formula_Real(),
            (5,5,7) => AlphaTensor_5x5x7.Build5x5x7Formula_Real(),
            (5,7,9) => AlphaTensor_5x7x9.Build5x7x9Formula_Real(),
            (5,7,10) => AlphaTensor_5x7x10.Build5x7x10Formula_Real(),
            (5,7,11) => AlphaTensor_5x7x11.Build5x7x11Formula_Real(),
            (5,8,9) => AlphaTensor_5x8x9.Build5x8x9Formula_Real(),
            (5,8,10) => AlphaTensor_5x8x10.Build5x8x10Formula_Real(),
            (5,8,11) => AlphaTensor_5x8x11.Build5x8x11Formula_Real(),
            (5,9,9) => AlphaTensor_5x9x9.Build5x9x9Formula_Real(),
            (5,9,10) => AlphaTensor_5x9x10.Build5x9x10Formula_Real(),
            (5,9,11) => AlphaTensor_5x9x11.Build5x9x11Formula_Real(),
            (5,9,12) => AlphaTensor_5x9x12.Build5x9x12Formula_Real(),
            (6,7,9) => AlphaTensor_6x7x9.Build6x7x9Formula_Real(),
            (6,7,10) => AlphaTensor_6x7x10.Build6x7x10Formula_Real(),
            (6,7,11) => AlphaTensor_6x7x11.Build6x7x11Formula_Real(),
            (6,8,10) => AlphaTensor_6x8x10.Build6x8x10Formula_Real(),
            (6,8,11) => AlphaTensor_6x8x11.Build6x8x11Formula_Real(),
            (6,9,9) => AlphaTensor_6x9x9.Build6x9x9Formula_Real(),
            (6,9,10) => AlphaTensor_6x9x10.Build6x9x10Formula_Real(),
            (6,9,11) => AlphaTensor_6x9x11.Build6x9x11Formula_Real(),
            (7,7,9) => AlphaTensor_7x7x9.Build7x7x9Formula_Real(),
            (7,7,10) => AlphaTensor_7x7x10.Build7x7x10Formula_Real(),
            (7,7,11) => AlphaTensor_7x7x11.Build7x7x11Formula_Real(),
            (7,8,9) => AlphaTensor_7x8x9.Build7x8x9Formula_Real(),
            (7,8,10) => AlphaTensor_7x8x10.Build7x8x10Formula_Real(),
            (7,8,11) => AlphaTensor_7x8x11.Build7x8x11Formula_Real(),
            (7,8,12) => AlphaTensor_7x8x12.Build7x8x12Formula_Real(),
            (7,9,9) => AlphaTensor_7x9x9.Build7x9x9Formula_Real(),
            (7,9,10) => AlphaTensor_7x9x10.Build7x9x10Formula_Real(),
            (7,9,11) => AlphaTensor_7x9x11.Build7x9x11Formula_Real(),
            (7,9,12) => AlphaTensor_7x9x12.Build7x9x12Formula_Real(),
            (7,10,10) => AlphaTensor_7x10x10.Build7x10x10Formula_Real(),
            (7,10,11) => AlphaTensor_7x10x11.Build7x10x11Formula_Real(),
            (7,11,11) => AlphaTensor_7x11x11.Build7x11x11Formula_Real(),
            (8,8,10) => AlphaTensor_8x8x10.Build8x8x10Formula_Real(),
            (8,8,11) => AlphaTensor_8x8x11.Build8x8x11Formula_Real(),
            (8,9,10) => AlphaTensor_8x9x10.Build8x9x10Formula_Real(),
            (8,9,11) => AlphaTensor_8x9x11.Build8x9x11Formula_Real(),
            (8,9,12) => AlphaTensor_8x9x12.Build8x9x12Formula_Real(),
            (8,10,10) => AlphaTensor_8x10x10.Build8x10x10Formula_Real(),
            (8,10,11) => AlphaTensor_8x10x11.Build8x10x11Formula_Real(),
            (8,10,12) => AlphaTensor_8x10x12.Build8x10x12Formula_Real(),
            (8,11,11) => AlphaTensor_8x11x11.Build8x11x11Formula_Real(),
            (8,11,12) => AlphaTensor_8x11x12.Build8x11x12Formula_Real(),
            (9,9,9) => AlphaTensor_9x9x9.Build9x9x9Formula_Real(),
            (9,9,10) => AlphaTensor_9x9x10.Build9x9x10Formula_Real(),
            (9,9,11) => AlphaTensor_9x9x11.Build9x9x11Formula_Real(),
            (9,10,10) => AlphaTensor_9x10x10.Build9x10x10Formula_Real(),
            (9,10,11) => AlphaTensor_9x10x11.Build9x10x11Formula_Real(),
            (9,10,12) => AlphaTensor_9x10x12.Build9x10x12Formula_Real(),
            (9,11,11) => AlphaTensor_9x11x11.Build9x11x11Formula_Real(),
            (9,11,12) => AlphaTensor_9x11x12.Build9x11x12Formula_Real(),
            (10,10,10) => AlphaTensor_10x10x10.Build10x10x10Formula_Real(),
            (10,10,11) => AlphaTensor_10x10x11.Build10x10x11Formula_Real(),
            (10,10,12) => AlphaTensor_10x10x12.Build10x10x12Formula_Real(),
            (10,11,11) => AlphaTensor_10x11x11.Build10x11x11Formula_Real(),
            (10,11,12) => AlphaTensor_10x11x12.Build10x11x12Formula_Real(),
            (10,12,12) => AlphaTensor_10x12x12.Build10x12x12Formula_Real(),
            (11,11,11) => AlphaTensor_11x11x11.Build11x11x11Formula_Real(),
            (11,11,12) => AlphaTensor_11x11x12.Build11x11x12Formula_Real(),
            (11,12,12) => AlphaTensor_11x12x12.Build11x12x12Formula_Real(),
            (4,5,7) => Decomposition_4x5x7.Build4x5x7Formula(),
            (4,6,6) => Decomposition_4x6x6.Build4x6x6Formula(),
            (4,6,7) => Decomposition_4x6x7.Build4x6x7Formula(),
            (4,7,7) => Decomposition_4x7x7.Build4x7x7Formula(),
            (5,5,6) => Decomposition_5x5x6.Build5x5x6Formula(),
            _ => throw new NotSupportedException($"No factorization available for (n,m,p)=({n},{m},{p}).")
        };
    }
}
